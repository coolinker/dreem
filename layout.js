// Generated by CoffeeScript 1.6.3
(function() {
  var hackstyle,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  hackstyle = (function() {
    var origstyle, stylemap, styletap;
    stylemap = {
      left: 'x',
      top: 'y',
      'background-color': 'bgcolor'
    };
    origstyle = $.style;
    styletap = function(elem, name, value) {
      var returnval, view;
      returnval = origstyle.apply(this, arguments);
      name = stylemap[name] || name;
      view = elem.$view;
      if (view[name] !== value) {
        view.setAttribute(name, value, true);
      }
      return returnval;
    };
    return function(active) {
      if (active) {
        return $.style = styletap;
      } else {
        return $.style = origstyle;
      }
    };
  })();

  window.lz = (function() {
    var Class, Eventable, Events, Keyboard, Layout, Module, Mouse, Node, SimpleLayout, Sprite, View, compiler, constraintScopes, dom, exports, idle, ignoredAttributes, keyboard, moduleKeywords, mouse, mouseEvents, _initConstraints, _ref;
    Events = {
      bind: function(ev, callback) {
        var calls, evs, name, _i, _len;
        evs = ev.split(' ');
        calls = this.hasOwnProperty('events') && this.events || (this.events = {});
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          calls[name] || (calls[name] = []);
          calls[name].push(callback);
        }
        return this;
      },
      one: function(ev, callback) {
        return this.bind(ev, function() {
          this.unbind(ev, arguments.callee);
          return callback.apply(this, arguments);
        });
      },
      trigger: function() {
        var args, callback, ev, list, _i, _len, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        ev = args.shift();
        list = this.hasOwnProperty('events') && ((_ref = this.events) != null ? _ref[ev] : void 0);
        if (!list) {
          return;
        }
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          callback = list[_i];
          if (callback.apply(this, args) === false) {
            break;
          }
        }
        return true;
      },
      listenTo: function(obj, ev, callback) {
        obj.bind(ev, callback);
        this.listeningTo || (this.listeningTo = []);
        this.listeningTo.push({
          obj: obj,
          ev: ev,
          callback: callback
        });
        return this;
      },
      listenToOnce: function(obj, ev, callback) {
        var listeningToOnce;
        listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
        listeningToOnce.push(obj);
        obj.one(ev, function() {
          var idx;
          idx = listeningToOnce.indexOf(obj);
          if (idx !== -1) {
            listeningToOnce.splice(idx, 1);
          }
          return callback.apply(this, arguments);
        });
        return this;
      },
      stopListening: function(obj, ev, callback) {
        var idx, listeningTo, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
        if (obj) {
          obj.unbind(ev, callback);
          _ref = [this.listeningTo, this.listeningToOnce];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listeningTo = _ref[_i];
            if (!listeningTo) {
              continue;
            }
            idx = listeningTo.indexOf(obj);
            if (idx !== -1) {
              _results.push(listeningTo.splice(idx, 1));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _ref1 = this.listeningTo;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            _ref2 = _ref1[_j], obj = _ref2.obj, ev = _ref2.ev, callback = _ref2.callback;
            obj.unbind(ev, callback);
          }
          return this.listeningTo = void 0;
        }
      },
      unbind: function(ev, callback) {
        var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;
        if (!ev) {
          this.events = {};
          return this;
        }
        evs = ev.split(' ');
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          list = (_ref = this.events) != null ? _ref[name] : void 0;
          if (!list) {
            continue;
          }
          if (!callback) {
            delete this.events[name];
            continue;
          }
          for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
            cb = list[i];
            if (!(cb === callback)) {
              continue;
            }
            list = list.slice();
            list.splice(i, 1);
            this.events[name] = list;
            break;
          }
        }
        return this;
      }
    };
    Events.on = Events.bind;
    Events.off = Events.unbind;
    moduleKeywords = ['included', 'extended'];
    Module = (function() {
      function Module() {}

      Module.include = function(obj) {
        var key, value, _ref;
        if (!obj) {
          throw new Error('include(obj) requires obj');
        }
        for (key in obj) {
          value = obj[key];
          if (__indexOf.call(moduleKeywords, key) < 0) {
            this.prototype[key] = value;
          }
        }
        if ((_ref = obj.included) != null) {
          _ref.call(this, obj);
        }
        return this;
      };

      return Module;

    })();
    Eventable = (function(_super) {
      var typemappings;

      __extends(Eventable, _super);

      function Eventable() {
        _ref = Eventable.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Eventable.include(Events);

      typemappings = {
        number: parseFloat,
        boolean: function(val) {
          if (typeof val === 'string') {
            return val === 'true';
          } else {
            return !!val;
          }
        },
        string: function(val) {
          return val + '';
        },
        json: function(val) {
          return JSON.parse(val);
        },
        expression: function(val) {
          if (typeof val !== 'string') {
            return val;
          }
          return eval(val);
        }
      };

      Eventable.prototype.setAttribute = function(name, value) {
        var type, _name;
        type = this.types[name];
        if (type) {
          value = typemappings[type](value);
        }
        if (typeof this[_name = "set_" + name] === "function") {
          this[_name](value);
        }
        if (this[name] !== value) {
          this[name] = value;
        }
        this.sendEvent(name, value);
        return this;
      };

      Eventable.prototype.sendEvent = function(name, value) {
        var _ref1;
        if ((_ref1 = this.events) != null ? _ref1[name] : void 0) {
          this.trigger(name, value, this);
        }
        return this;
      };

      Eventable.prototype.set = function(attributes) {
        var name, value;
        for (name in attributes) {
          value = attributes[name];
          this.setAttribute(name, value);
        }
        return this;
      };

      return Eventable;

    })(Module);
    compiler = (function() {
      var cacheKey, compile, compileCache, exports, findBindings, scriptCache, transform;
      cacheKey = "compilecache";
      if (cacheKey in localStorage) {
        compileCache = JSON.parse(localStorage[cacheKey]);
      } else {
        compileCache = {
          bindings: {},
          script: {
            coffee: {}
          }
        };
      }
      $(window).on('unload', function() {
        return localStorage[cacheKey] = JSON.stringify(compileCache);
      });
      findBindings = (function() {
        var bindingCache, propertyBindings, scopes;
        bindingCache = compileCache.bindings;
        scopes = null;
        propertyBindings = {
          MemberExpression: function(n) {
            var name;
            name = n.property.name;
            n = n.object;
            scopes.push({
              binding: acorn.stringify(n),
              property: name
            });
            return true;
          }
        };
        return function(expression) {
          var ast;
          if (expression in bindingCache) {
            return bindingCache[expression];
          }
          ast = acorn.parse(expression);
          scopes = [];
          acorn.walkDown(ast, propertyBindings);
          return bindingCache[expression] = scopes;
        };
      })();
      transform = (function() {
        var coffeeCache, compilers;
        coffeeCache = compileCache.script.coffee;
        compilers = {
          coffee: function(script) {
            if (script in coffeeCache) {
              return coffeeCache[script];
            }
            if (!window.CoffeeScript) {
              console.warn('missing coffee-script.js include');
              return;
            }
            if (script) {
              return coffeeCache[script] = CoffeeScript.compile(script, {
                bare: true
              });
            }
          }
        };
        return function(script, name) {
          if (script == null) {
            script = '';
          }
          if (!(name in compilers)) {
            return script;
          }
          return compilers[name](script);
        };
      })();
      scriptCache = {};
      compile = function(script, args) {
        var e, key;
        if (script == null) {
          script = '';
        }
        if (args == null) {
          args = [];
        }
        key = script + args.join();
        if (key in scriptCache) {
          return scriptCache[key];
        }
        try {
          return scriptCache[key] = new Function(args, script);
        } catch (_error) {
          e = _error;
          return console.error('failed to compile', args, script, e);
        }
      };
      return exports = {
        compile: compile,
        transform: transform,
        findBindings: findBindings
      };
    })();
    constraintScopes = [];
    _initConstraints = function() {
      var constraint, _i, _len;
      for (_i = 0, _len = constraintScopes.length; _i < _len; _i++) {
        constraint = constraintScopes[_i];
        constraint._bindConstraints();
      }
      return constraintScopes = [];
    };
    Node = (function(_super) {
      var eventCallback, installMethod, matchConstraint;

      __extends(Node, _super);

      matchConstraint = /\${(.+)}/;

      function Node(el, attributes) {
        var args, callback, constraint, method, methodname, name, reference, script, value, _i, _len, _ref1, _ref2, _ref3, _ref4;
        if (attributes == null) {
          attributes = {};
        }
        this.subnodes = [];
        this.types = (_ref1 = attributes.$types) != null ? _ref1 : {};
        delete attributes.$types;
        if (el != null ? el.textContent : void 0) {
          attributes.textcontent = el.textContent;
        }
        if (attributes.$methods) {
          _ref2 = attributes.$methods;
          for (methodname in _ref2) {
            method = _ref2[methodname];
            installMethod(this, methodname, compiler.compile.apply(null, method));
          }
          delete attributes.$methods;
        }
        if (attributes.$handlers) {
          _ref3 = attributes.$handlers;
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            _ref4 = _ref3[_i], name = _ref4.name, script = _ref4.script, args = _ref4.args, reference = _ref4.reference, method = _ref4.method;
            name = name.substr(2);
            if (method) {
              callback = this[method];
            } else {
              callback = eventCallback(name, script, this, args);
            }
            if (reference != null) {
              this.listenTo(eval(reference), name, callback);
            } else {
              this.bind(name, callback);
            }
            if (__indexOf.call(mouseEvents, name) >= 0) {
              if (attributes.clickable !== "false") {
                attributes.clickable = true;
              }
            }
          }
          delete attributes.$handlers;
        }
        for (name in attributes) {
          value = attributes[name];
          constraint = typeof value.match === "function" ? value.match(matchConstraint) : void 0;
          if (constraint) {
            this.applyConstraint(name, constraint[1]);
          } else if (name.indexOf('on') === 0) {
            name = name.substr(2);
            this.bind(name, eventCallback(name, value, this));
          } else {
            this.setAttribute(name, value);
          }
        }
        if (this.constraints) {
          constraintScopes.push(this);
        }
        this.sendEvent('init', this);
      }

      Node.prototype.initConstraints = function() {
        return _initConstraints();
      };

      eventCallback = function(name, script, scope, fnargs) {
        var js;
        if (fnargs == null) {
          fnargs = ['value'];
        }
        js = compiler.compile(script, fnargs);
        return function() {
          var args;
          if (name in scope) {
            args = [scope[name]];
          } else {
            args = arguments;
          }
          return js.apply(scope, args);
        };
      };

      installMethod = function(scope, methodname, method) {
        var meth, supr;
        if (methodname in scope) {
          supr = scope[methodname];
          meth = method;
          return scope[methodname] = function() {
            supr.apply(scope, arguments);
            return meth.apply(scope, arguments);
          };
        } else {
          return scope[methodname] = method;
        }
      };

      Node.prototype.applyConstraint = function(property, expression) {
        var bindexpression, bindings, scope, scopes, _i, _len;
        if (this.constraints == null) {
          this.constraints = {};
        }
        this.constraints[property] = {
          expression: 'return ' + expression,
          bindings: {}
        };
        bindings = this.constraints[property].bindings;
        scopes = compiler.findBindings(expression);
        for (_i = 0, _len = scopes.length; _i < _len; _i++) {
          scope = scopes[_i];
          bindexpression = scope.binding;
          bindings[bindexpression] = scope;
        }
      };

      Node.prototype._bindConstraints = function() {
        var bindexpression, binding, bindings, boundref, constraint, expression, fn, name, property, _ref1;
        _ref1 = this.constraints;
        for (name in _ref1) {
          constraint = _ref1[name];
          bindings = constraint.bindings, expression = constraint.expression;
          fn = compiler.compile(expression).bind(this);
          constraint = this._constraintCallback(name, fn);
          for (bindexpression in bindings) {
            binding = bindings[bindexpression];
            property = binding.property;
            boundref = compiler.compile('return ' + bindexpression).bind(this)();
            if (boundref == null) {
              boundref = boundref.$view;
            }
            if (typeof boundref.bind === "function") {
              boundref.bind(property, constraint);
            }
          }
          this.setAttribute(name, fn());
        }
      };

      Node.prototype._constraintCallback = function(name, fn) {
        var _this = this;
        return function() {
          return _this.setAttribute(name, fn());
        };
      };

      Node.prototype.set_parent = function(parent) {
        if (parent instanceof Node) {
          if (this.name) {
            parent[this.name] = this;
          }
          parent.subnodes.push(this);
          return parent.sendEvent('subnodes', this);
        }
      };

      Node.prototype.set_name = function(name) {
        var _ref1;
        return (_ref1 = this.parent) != null ? _ref1[name] = this : void 0;
      };

      Node.prototype._removeFromParent = function(name) {
        var arr, index;
        if (!this.parent) {
          return;
        }
        arr = this.parent[name];
        index = arr.indexOf(this);
        if (index !== -1) {
          arr.splice(index, 1);
          this.parent.sendEvent(name, arr[index]);
        }
      };

      Node.prototype._findInParents = function(name) {
        var p;
        p = this.parent;
        while (p) {
          if (name in p) {
            return p[name];
          }
          p = p.parent;
        }
      };

      Node.prototype.destroy = function(skipevents) {
        var subnode, _i, _len, _ref1, _ref2;
        this.sendEvent('destroy', this);
        if (this.listeningTo) {
          this.stopListening();
        }
        this.unbind();
        if (((_ref1 = this.parent) != null ? _ref1[this.name] : void 0) === this) {
          delete this.parent[this.name];
        }
        _ref2 = this.subnodes;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          subnode = _ref2[_i];
          subnode.destroy(true);
        }
        if (!skipevents) {
          return this._removeFromParent('subnodes');
        }
      };

      return Node;

    })(Eventable);
    Sprite = (function() {
      var fcamelCase, rdashAlpha, stylemap;

      stylemap = {
        x: 'left',
        y: 'top',
        bgcolor: 'backgroundColor'
      };

      fcamelCase = function(all, letter) {
        return letter.toUpperCase();
      };

      rdashAlpha = /-([\da-z])/gi;

      function Sprite(jqel, view) {
        this.animate = __bind(this.animate, this);
        if (jqel == null) {
          this.el = document.createElement('div');
        } else if (jqel instanceof jQuery) {
          this.el = jqel[0];
        } else if (jqel instanceof HTMLElement) {
          this.el = jqel;
        }
        this.el.$view = view;
        this.el.setAttribute('class', 'sprite');
      }

      Sprite.prototype.setStyle = function(name, value) {
        if (value == null) {
          value = '';
        }
        if (name in stylemap) {
          name = stylemap[name];
        } else if (name.match(rdashAlpha)) {
          name = name.replace(rdashAlpha, fcamelCase);
        }
        return this.el.style[name] = value;
      };

      Sprite.prototype.set_parent = function(parent) {
        if (parent instanceof Sprite) {
          parent = parent.el;
        } else if (parent instanceof jQuery) {
          parent = parent[0];
        }
        return parent.appendChild(this.el);
      };

      Sprite.prototype.set_id = function(id) {
        return this.el.setAttribute('id', id);
      };

      Sprite.prototype.animate = function() {
        if (this.jqel == null) {
          this.jqel = $(this.el);
        }
        return this.jqel.animate.apply(this.jqel, arguments);
      };

      Sprite.prototype.set_clickable = function(clickable) {
        return this.setStyle('pointer-events', clickable ? 'auto' : 'none');
      };

      Sprite.prototype.destroy = function() {
        this.el.parentNode.removeChild(this.el);
        return this.el = this.jqel = null;
      };

      Sprite.prototype.set_clip = function(clip) {
        return this.setStyle('overflow', clip ? 'hidden' : '');
      };

      Sprite.prototype.text = function(text) {
        if (text != null) {
          return this.el.innerHTML = text;
        } else {
          return this.el.innerHTML;
        }
      };

      Sprite.prototype.value = function(value) {
        if (value != null) {
          return this.input.value = value;
        } else {
          return this.input.value;
        }
      };

      Sprite.prototype.measureTextSize = function(multiline, width) {
        this.el.setAttribute('class', 'sprite sprite-text');
        if (multiline) {
          this.setStyle('width', width);
          this.setStyle('whiteSpace', 'normal');
        } else {
          this.setStyle('width', 'auto');
        }
        return {
          width: this.el.clientWidth,
          height: this.el.clientHeight
        };
      };

      Sprite.prototype.createInputtextElement = function(text, multiline, width) {
        var input,
          _this = this;
        input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.setAttribute('value', text);
        input.setAttribute('style', 'border: none; outline: none; background-color:transparent;');
        this.el.appendChild(input);
        return setTimeout(function() {
          _this.input = _this.el.getElementsByTagName('input')[0];
          return _this.input.$view = _this.el.$view;
        }, 0);
      };

      Sprite.prototype.getAbsolute = function() {
        var pos;
        if (this.jqel == null) {
          this.jqel = $(this.el);
        }
        pos = this.jqel.position();
        return {
          x: pos.left,
          y: pos.top
        };
      };

      Sprite.prototype.set_class = function(classname) {
        return this.el.setAttribute('class', classname);
      };

      return Sprite;

    })();
    ignoredAttributes = {
      parent: true,
      id: true,
      name: true,
      "extends": true,
      type: true
    };
    View = (function(_super) {
      __extends(View, _super);

      function View(el, attributes) {
        var key, type, types, _ref1;
        if (attributes == null) {
          attributes = {};
        }
        this.subviews = [];
        types = {
          x: 'number',
          y: 'number',
          width: 'number',
          height: 'number',
          clickable: 'boolean',
          clip: 'boolean'
        };
        for (key in types) {
          type = types[key];
          if (!(key in attributes)) {
            this[key] = type === 'number' ? 0 : false;
          }
        }
        _ref1 = attributes.$types;
        for (key in _ref1) {
          type = _ref1[key];
          types[key] = type;
        }
        attributes.$types = types;
        if (el instanceof View) {
          el = el.sprite;
        }
        this.sprite = new Sprite(el, this);
        View.__super__.constructor.call(this, el, attributes);
      }

      View.prototype.setAttribute = function(name, value, skip) {
        if (!(skip || ignoredAttributes[name] || this[name] === value)) {
          this.sprite.setStyle(name, value);
        }
        return View.__super__.setAttribute.call(this, name, value);
      };

      View.prototype.set_parent = function(parent) {
        View.__super__.set_parent.call(this, parent);
        if (parent instanceof View) {
          parent.subviews.push(this);
          parent.sendEvent('subviews', this);
          parent = parent.sprite;
        }
        return this.sprite.set_parent(parent);
      };

      View.prototype.set_id = function(id) {
        return this.sprite.set_id(id);
      };

      View.prototype.animate = function() {
        return this.sprite.animate.apply(this, arguments);
      };

      View.prototype.set_clickable = function(clickable) {
        return this.sprite.set_clickable(clickable);
      };

      View.prototype.set_clip = function(clip) {
        return this.sprite.set_clip(clip);
      };

      View.prototype.destroy = function(skipevents) {
        View.__super__.destroy.call(this, skipevents);
        if (!skipevents) {
          this._removeFromParent('subviews');
        }
        this.sprite.destroy();
        return this.sprite = null;
      };

      View.prototype.getAbsolute = function() {
        return this.sprite.getAbsolute();
      };

      View.prototype.set_class = function(classname) {
        return this.sprite.set_class(classname);
      };

      return View;

    })(Node);
    dom = (function() {
      var exports, flattenattributes, htmlDecode, initAllElements, initElement, initFromElement, processSpecialTags, specialtags, writeCSS;
      flattenattributes = function(namednodemap) {
        var attributes, i, _i, _len;
        attributes = {};
        for (_i = 0, _len = namednodemap.length; _i < _len; _i++) {
          i = namednodemap[_i];
          attributes[i.name] = i.value;
        }
        return attributes;
      };
      initFromElement = function(el) {
        var attributes, child, name, parent, _children;
        initElement(el);
        for (child in _children) {
          name = child.name, el = child.el, attributes = child.attributes;
          parent = new lz[name](el, attributes);
        }
        _children = [];
        return _initConstraints();
      };
      specialtags = ['handler', 'method', 'attribute', 'setter'];
      initElement = function(el, parent) {
        var attributes, child, children, event, eventname, tagname, _i, _j, _k, _len, _len1, _len2, _ref1;
        tagname = el.localName;
        if (!(tagname in lz)) {
          console.warn('could not find class for tag', tagname, el);
          return;
        }
        attributes = flattenattributes(el.attributes);
        for (_i = 0, _len = mouseEvents.length; _i < _len; _i++) {
          event = mouseEvents[_i];
          eventname = 'on' + event;
          if (eventname in attributes) {
            if (attributes.clickable !== false) {
              attributes.clickable = true;
            }
            el.removeAttribute(eventname);
          }
        }
        if (parent == null) {
          parent = el.parentNode;
        }
        if (parent != null) {
          attributes.parent = parent;
        }
        children = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = el.childNodes;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            child = _ref1[_j];
            if (child.nodeType === 1) {
              _results.push(child);
            }
          }
          return _results;
        })();
        if (tagname === 'class') {
          for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
            child = children[_j];
            child.$defer = true;
          }
        } else {
          dom.processSpecialTags(el, attributes, attributes.type);
        }
        parent = new lz[tagname](el, attributes);
        if (tagname !== 'class') {
          for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
            child = children[_k];
            if (_ref1 = child.localName, __indexOf.call(specialtags, _ref1) < 0) {
              initElement(child, parent);
            }
          }
        }
      };
      writeCSS = function() {
        var style;
        style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '.sprite{ position: absolute; pointer-events: none; } .sprite-text{ width: auto; height; auto; white-space: nowrap; } .hidden{ display: none; } method { display: none; } handler { display: none; } setter { display: none; }';
        return document.getElementsByTagName('head')[0].appendChild(style);
      };
      initAllElements = function(selector) {
        var el, _i, _len, _results;
        if (selector == null) {
          selector = $('view');
        }
        _results = [];
        for (_i = 0, _len = selector.length; _i < _len; _i++) {
          el = selector[_i];
          if (!(el.$defer || el.$view)) {
            _results.push(initFromElement(el));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      htmlDecode = function(input) {
        var e, _ref1;
        e = document.createElement('div');
        e.innerHTML = input;
        return (_ref1 = e.childNodes[0]) != null ? _ref1.nodeValue : void 0;
      };
      processSpecialTags = function(el, classattributes, defaulttype) {
        var args, attributes, child, children, handler, script, type, _i, _len, _ref1, _ref2, _ref3, _ref4;
        if (classattributes.$types == null) {
          classattributes.$types = {};
        }
        if (classattributes.$methods == null) {
          classattributes.$methods = {};
        }
        if (classattributes.$handlers == null) {
          classattributes.$handlers = [];
        }
        children = (function() {
          var _i, _len, _ref1, _ref2, _results;
          _ref1 = el.childNodes;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            child = _ref1[_i];
            if (child.nodeType === 1 && (_ref2 = child.localName, __indexOf.call(specialtags, _ref2) >= 0)) {
              _results.push(child);
            }
          }
          return _results;
        })();
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          attributes = flattenattributes(child.attributes);
          switch (child.localName) {
            case 'handler':
              args = ((_ref1 = attributes.args) != null ? _ref1 : '').split();
              script = htmlDecode(child.innerHTML);
              type = (_ref2 = attributes.type) != null ? _ref2 : defaulttype;
              handler = {
                name: attributes.name,
                script: compiler.transform(script, type),
                args: args,
                reference: attributes.reference,
                method: attributes.method
              };
              classattributes.$handlers.push(handler);
              break;
            case 'method':
              args = ((_ref3 = attributes.args) != null ? _ref3 : '').split();
              script = htmlDecode(child.innerHTML);
              type = attributes.type || defaulttype;
              classattributes.$methods[attributes.name] = [compiler.transform(script, type), args];
              break;
            case 'setter':
              args = ((_ref4 = attributes.args) != null ? _ref4 : '').split();
              script = htmlDecode(child.innerHTML);
              type = attributes.type || defaulttype;
              classattributes.$methods['set_' + attributes.name] = [compiler.transform(script, type), args];
              break;
            case 'attribute':
              classattributes[attributes.name] = attributes.value;
              classattributes.$types[attributes.name] = attributes.type;
          }
        }
        return children;
      };
      return exports = {
        initAllElements: initAllElements,
        initElement: initElement,
        processSpecialTags: processSpecialTags,
        writeCSS: writeCSS
      };
    })();
    Class = (function() {
      var clone;

      clone = function(obj) {
        var name, newobj, val;
        newobj = {};
        for (name in obj) {
          val = obj[name];
          newobj[name] = val;
        }
        return newobj;
      };

      function Class(el, classattributes) {
        var body, child, compilertype, extend, ignored, name, oldbody, processedChildren, _i, _len;
        if (classattributes == null) {
          classattributes = {};
        }
        name = classattributes.name;
        extend = classattributes["extends"] != null ? classattributes["extends"] : classattributes["extends"] = 'view';
        compilertype = classattributes.type;
        for (ignored in ignoredAttributes) {
          delete classattributes[ignored];
        }
        processedChildren = dom.processSpecialTags(el, classattributes, compilertype);
        oldbody = el.innerHTML.trim();
        for (_i = 0, _len = processedChildren.length; _i < _len; _i++) {
          child = processedChildren[_i];
          child.parentNode.removeChild(child);
        }
        body = el.innerHTML.trim();
        if (oldbody) {
          el.innerHTML = oldbody;
        }
        if (name in lz) {
          console.warn('overwriting class', name);
        }
        lz[name] = function(instanceel, instanceattributes) {
          var attributes, children, key, parent, propname, val, value, viewel, _j, _len1, _ref1;
          attributes = clone(classattributes);
          for (key in instanceattributes) {
            value = instanceattributes[key];
            if ((key === '$methods' || key === '$types') && key in attributes) {
              attributes[key] = clone(attributes[key]);
              for (propname in value) {
                val = value[propname];
                attributes[key][propname] = val;
              }
            } else if (key === '$handlers' && key in attributes) {
              attributes[key] = attributes[key].concat(value);
            } else {
              attributes[key] = value;
            }
          }
          parent = new lz[extend](instanceel, attributes);
          if (extend === 'node') {
            instanceel.setAttribute('class', 'hidden');
          }
          if (!(viewel = (_ref1 = parent.sprite) != null ? _ref1.el : void 0)) {
            return parent;
          }
          if (body) {
            viewel.innerHTML = body;
            children = (function() {
              var _j, _len1, _ref2, _results;
              _ref2 = viewel.childNodes;
              _results = [];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                child = _ref2[_j];
                if (child.nodeType === 1) {
                  _results.push(child);
                }
              }
              return _results;
            })();
            for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
              child = children[_j];
              child.$defer = null;
              dom.initElement(child, parent);
            }
          }
          return parent;
        };
      }

      return Class;

    })();
    Layout = (function(_super) {
      __extends(Layout, _super);

      function Layout(el, attributes) {
        var subview, subviews, _base, _i, _len;
        if (attributes == null) {
          attributes = {};
        }
        this.update = __bind(this.update, this);
        this.added = __bind(this.added, this);
        this.locked = true;
        Layout.__super__.constructor.call(this, el, attributes);
        this.listenTo(this.parent, 'subviews', this.added);
        if ((_base = this.parent).layouts == null) {
          _base.layouts = [];
        }
        this.parent.layouts.push(this);
        subviews = this.parent.subviews;
        if (subviews) {
          for (_i = 0, _len = subviews.length; _i < _len; _i++) {
            subview = subviews[_i];
            this.added(subview);
          }
        }
        this.locked = false;
        this.update();
      }

      Layout.prototype.added = function(child) {
        if (child) {
          if (!child.ignorelayout) {
            this.sendEvent('subview', child);
          }
        }
        return this.update(null, child);
      };

      Layout.prototype.update = function(value, sender) {};

      Layout.prototype.skip = function() {
        var _ref1;
        if (this.locked || (!((_ref1 = this.parent) != null ? _ref1.subviews : void 0)) || (this.parent.subviews.length === 0)) {
          return true;
        }
      };

      Layout.prototype.destroy = function(skipevents) {
        this.locked = true;
        Layout.__super__.destroy.call(this, skipevents);
        if (!skipevents) {
          return this._removeFromParent('layouts');
        }
      };

      Layout.prototype.set_locked = function(locked) {
        var changed;
        changed = this.locked !== locked;
        this.locked = locked;
        this.sendEvent('locked', locked);
        if (changed && !locked) {
          return this.update();
        }
      };

      return Layout;

    })(Node);
    SimpleLayout = (function(_super) {
      __extends(SimpleLayout, _super);

      function SimpleLayout(el, attributes) {
        if (attributes == null) {
          attributes = {};
        }
        this.attribute = 'x';
        this.axis = 'width';
        this.spacing = 10;
        this.inset = 10;
        if (attributes.$types == null) {
          attributes.$types = {};
        }
        attributes.$types.spacing = 'number';
        attributes.$types.inset = 'number';
        SimpleLayout.__super__.constructor.call(this, el, attributes);
      }

      SimpleLayout.prototype.set_attribute = function(attr) {
        var newaxis, subview, _i, _len, _ref1;
        newaxis = (function() {
          switch (attr) {
            case 'x':
              return 'width';
            case 'y':
              return 'height';
          }
        })();
        _ref1 = this.parent.subviews != null;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subview = _ref1[_i];
          subview.unbind(this.axis, this.update).bind(newaxis, this.update);
        }
        this.axis = newaxis;
        this.attribute = attr;
        return this.update();
      };

      SimpleLayout.prototype.set_spacing = function(space) {
        this.spacing = space;
        return this.update();
      };

      SimpleLayout.prototype.set_inset = function(i) {
        this.inset = i;
        return this.update();
      };

      SimpleLayout.prototype.added = function(child) {
        this.listenTo(child, this.axis, this.update);
        return SimpleLayout.__super__.added.call(this, child);
      };

      SimpleLayout.prototype.update = function(value, sender) {
        var pos, skip, subview, _i, _len, _ref1;
        if (this.skip()) {
          return;
        }
        pos = this.inset;
        if (sender) {
          skip = true;
        }
        _ref1 = this.parent.subviews;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subview = _ref1[_i];
          if (skip && subview !== sender) {

          } else {
            if (subview[this.attribute] !== pos) {
              subview.setAttribute(this.attribute, pos);
            }
            skip = false;
          }
          pos += this.spacing + subview[this.axis];
        }
        return pos;
      };

      return SimpleLayout;

    })(Layout);
    idle = (function() {
      var doTick, requestAnimationFrame, tickEvents, ticking;
      requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
      ticking = false;
      tickEvents = [];
      doTick = function() {
        var key;
        for (key in tickEvents) {
          if (tickEvents[key]) {
            tickEvents[key]();
            tickEvents[key] = null;
          }
        }
        return ticking = false;
      };
      return function(key, callback) {
        if (!ticking) {
          requestAnimationFrame(doTick);
        }
        ticking = true;
        return tickEvents[key] = callback;
      };
    })();
    mouseEvents = ['click', 'mouseover', 'mouseout', 'mousedown', 'mouseup'];
    Mouse = (function(_super) {
      __extends(Mouse, _super);

      function Mouse() {
        this.stop = __bind(this.stop, this);
        this.start = __bind(this.start, this);
        this.sender = __bind(this.sender, this);
        this.handle = __bind(this.handle, this);
        this.x = 0;
        this.y = 0;
        this.docSelector = $(document);
        this.docSelector.on(mouseEvents.join(' '), this.handle);
      }

      Mouse.prototype.bind = function(ev, callback) {
        var _ref1, _ref2, _ref3;
        Mouse.__super__.bind.call(this, ev, callback);
        if (((_ref1 = this.events['mousemove']) != null ? _ref1.length : void 0) || ((_ref2 = this.events['x']) != null ? _ref2.length : void 0) || ((_ref3 = this.events['y']) != null ? _ref3.length : void 0)) {
          return this.start();
        }
      };

      Mouse.prototype.unbind = function(ev, callback) {
        var _ref1, _ref2, _ref3;
        Mouse.__super__.unbind.call(this, ev, callback);
        if (((_ref1 = this.events['mousemove']) != null ? _ref1.length : void 0) === 0 && ((_ref2 = this.events['x']) != null ? _ref2.length : void 0) === 0 && ((_ref3 = this.events['y']) != null ? _ref3.length : void 0) === 0) {
          return this.stop();
        }
      };

      Mouse.prototype.handle = function(event) {
        var type, view;
        view = event.target.$view;
        type = event.type;
        if (view) {
          view.sendEvent(type, view);
        }
        if (this.started && type === 'mousemove') {
          this.x = event.pageX;
          this.y = event.pageY;
          return idle(0, this.sender);
        } else {
          return this.sendEvent(type, view);
        }
      };

      Mouse.prototype.sender = function() {
        this.sendEvent("mousemove", {
          x: this.x,
          y: this.y
        });
        this.sendEvent('x', this.x);
        return this.sendEvent('y', this.y);
      };

      Mouse.prototype.start = function(event) {
        if (this.started) {
          return;
        }
        if (event && event.target !== document) {
          return;
        }
        this.started = true;
        return this.docSelector.on("mousemove", this.handle).one("mouseout", this.stop);
      };

      Mouse.prototype.stop = function(event) {
        if (!this.started) {
          return;
        }
        if (event && event.target !== document) {
          return;
        }
        this.started = false;
        return this.docSelector.off("mousemove", this.handle).one("mouseover", this.start);
      };

      return Mouse;

    })(Eventable);
    Keyboard = (function(_super) {
      var keyboardEvents, keys;

      __extends(Keyboard, _super);

      keyboardEvents = ['focus', 'blur', 'select', 'keyup', 'keydown', 'change'];

      keys = {
        shiftKey: false,
        altKey: false,
        ctrlKey: false,
        metaKey: false,
        keyCode: 0
      };

      function Keyboard() {
        this.handle = __bind(this.handle, this);
        $(document).on(keyboardEvents.join(' '), this.handle);
      }

      Keyboard.prototype.handle = function(event) {
        var inputtext, key, type, value;
        inputtext = event.target.$view;
        type = event.type;
        for (key in keys) {
          value = keys[key];
          keys[key] = event[key];
        }
        keys.type = type;
        if (inputtext) {
          inputtext.sendEvent(type, keys);
          if (type === 'keydown' || type === 'keyup' || type === 'blur' || type === 'change') {
            value = event.target.value;
            if (inputtext.text !== value) {
              inputtext.text = value;
              inputtext.sendEvent('text', value);
            }
          }
        }
        return this.sendEvent(type, keys);
      };

      return Keyboard;

    })(Eventable);
    mouse = new Mouse();
    keyboard = new Keyboard();
    return exports = {
      view: View,
      "class": Class,
      node: Node,
      mouse: mouse,
      keyboard: keyboard,
      layout: Layout,
      simplelayout: SimpleLayout,
      initElements: dom.initAllElements,
      writeCSS: dom.writeCSS
    };
  })();

  lz.writeCSS();

  $(window).on('load', function() {
    lz.initElements();
    return hackstyle(true);
  });

}).call(this);
