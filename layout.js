// Generated by CoffeeScript 1.6.2
(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.lz = (function() {
    var Class, Events, Module, Node, Sprite, View, exports, init, moduleKeywords, viewFromElement;

    Events = {
      bind: function(ev, callback) {
        var calls, evs, name, _i, _len;

        evs = ev.split(' ');
        calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          calls[name] || (calls[name] = []);
          calls[name].push(callback);
        }
        return this;
      },
      one: function(ev, callback) {
        return this.bind(ev, function() {
          this.unbind(ev, arguments.callee);
          return callback.apply(this, arguments);
        });
      },
      trigger: function() {
        var args, callback, ev, list, _i, _len, _ref;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        ev = args.shift();
        list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
        if (!list) {
          return;
        }
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          callback = list[_i];
          if (callback.apply(this, args) === false) {
            break;
          }
        }
        return true;
      },
      listenTo: function(obj, ev, callback) {
        obj.bind(ev, callback);
        this.listeningTo || (this.listeningTo = []);
        this.listeningTo.push(obj);
        return this;
      },
      listenToOnce: function(obj, ev, callback) {
        var listeningToOnce;

        listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
        listeningToOnce.push(obj);
        obj.one(ev, function() {
          var idx;

          idx = listeningToOnce.indexOf(obj);
          if (idx !== -1) {
            listeningToOnce.splice(idx, 1);
          }
          return callback.apply(this, arguments);
        });
        return this;
      },
      stopListening: function(obj, ev, callback) {
        var idx, listeningTo, _i, _j, _len, _len1, _ref, _ref1, _results;

        if (obj) {
          obj.unbind(ev, callback);
          _ref = [this.listeningTo, this.listeningToOnce];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listeningTo = _ref[_i];
            if (!listeningTo) {
              continue;
            }
            idx = listeningTo.indexOf(obj);
            if (idx !== -1) {
              _results.push(listeningTo.splice(idx, 1));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _ref1 = this.listeningTo;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            obj = _ref1[_j];
            obj.unbind();
          }
          return this.listeningTo = void 0;
        }
      },
      unbind: function(ev, callback) {
        var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;

        if (!ev) {
          this._callbacks = {};
          return this;
        }
        evs = ev.split(' ');
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
          if (!list) {
            continue;
          }
          if (!callback) {
            delete this._callbacks[name];
            continue;
          }
          for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
            cb = list[i];
            if (!(cb === callback)) {
              continue;
            }
            list = list.slice();
            list.splice(i, 1);
            this._callbacks[name] = list;
            break;
          }
        }
        return this;
      }
    };
    Events.on = Events.bind;
    Events.off = Events.unbind;
    moduleKeywords = ['included', 'extended'];
    Module = (function() {
      function Module() {}

      Module.include = function(obj) {
        var key, value, _ref;

        if (!obj) {
          throw new Error('include(obj) requires obj');
        }
        for (key in obj) {
          value = obj[key];
          if (__indexOf.call(moduleKeywords, key) < 0) {
            this.prototype[key] = value;
          }
        }
        if ((_ref = obj.included) != null) {
          _ref.apply(this, [obj]);
        }
        return this;
      };

      return Module;

    })();
    Node = (function(_super) {
      var matchConstraint, propertyBindings, scopes;

      __extends(Node, _super);

      Node.include(Events);

      function Node(el, options) {
        this.children = [];
        this.types = {};
        this.constraints = {};
        if (!(this instanceof View)) {
          this.init(options);
        }
      }

      scopes = null;

      propertyBindings = {
        find: function(expression) {
          var ast;

          ast = acorn.parse(expression);
          scopes = [];
          acorn.walkDown(ast, this);
          return scopes;
        },
        MemberExpression: function(n) {
          var name;

          name = n.property.name;
          n = n.object;
          scopes.push({
            binding: acorn.stringify(n),
            property: name
          });
          return true;
        }
      };

      matchConstraint = /\${(.+)}/;

      Node.prototype.applyConstraint = function(name, value) {
        var binding, bindingfn, constraint, constraintBinding, expression, property, scope, _i, _len, _ref;

        constraint = typeof value.match === "function" ? value.match(matchConstraint) : void 0;
        if (expression = constraint != null ? constraint[1] : void 0) {
          this.constraints[name] = (new Function([], 'return ' + expression)).bind(this);
          scopes = propertyBindings.find(expression);
          constraintBinding = this.constraints[name];
          if ((_ref = constraintBinding.bindings) == null) {
            constraintBinding.bindings = {};
          }
          for (_i = 0, _len = scopes.length; _i < _len; _i++) {
            scope = scopes[_i];
            binding = scope.binding, property = scope.property;
            bindingfn = (new Function([], 'return ' + binding)).bind(this);
            constraintBinding.bindings[property] = bindingfn;
          }
          return true;
        }
      };

      Node.prototype.setAttribute = function(name, value) {
        var setter, type;

        if (this.applyConstraint(name, value)) {
          return;
        }
        if (name in this.types) {
          type = this.types[name];
          if (type === 'number') {
            value = value * 1;
          }
        }
        setter = 'set_' + name;
        if (setter in this) {
          if (typeof this[setter] === "function") {
            this[setter](value);
          }
        } else if (name.indexOf('on_') === 0) {
          name = name.substr(3);
          this.bind(name, this.eventCallback(name, value, this));
        } else {
          this[name] = value;
        }
        return this.trigger(name);
      };

      Node.prototype.eventCallback = function(name, js, scope) {
        var _this = this;

        return function() {
          var val;

          val = scope[name];
          return (new Function(['value'], js).bind(scope))(val);
        };
      };

      Node.prototype.bindConstraints = function() {
        var binding, js, name, value, _ref, _results;

        _ref = this.constraints;
        _results = [];
        for (name in _ref) {
          value = _ref[name];
          this.setAttribute(name, value());
          _results.push((function() {
            var _ref1, _results1;

            _ref1 = this.constraints[name].bindings;
            _results1 = [];
            for (js in _ref1) {
              binding = _ref1[js];
              _results1.push(binding().bind(js, this.constraintCallback(js, value, name)));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Node.prototype.constraintCallback = function(name, fn, propname) {
        var _this = this;

        return function() {
          return _this.setAttribute(propname, fn());
        };
      };

      Node.prototype.init = function(attributes) {
        var name, value;

        for (name in attributes) {
          value = attributes[name];
          this.setAttribute(name, value);
        }
        return this.bindConstraints();
      };

      Node.prototype.set_parent = function(parent) {
        if (parent instanceof View) {
          this.parent = parent;
          parent[this.name] = this;
          parent.children.push(this);
          parent = parent.sprite;
        }
        return typeof this.setParent === "function" ? this.setParent(parent) : void 0;
      };

      Node.prototype.set_name = function(name) {
        var _ref;

        this.name = name;
        return (_ref = this.parent) != null ? _ref[name] = this : void 0;
      };

      return Node;

    })(Module);
    Sprite = {
      initSprite: function(sprite) {
        this.sprite = sprite != null ? sprite : $('<div/>');
        if (!(this.sprite instanceof jQuery)) {
          this.sprite = $(this.sprite);
        }
        return this.sprite.addClass('sprite');
      },
      setStyle: function(name, value) {
        var stylemap;

        if (value == null) {
          value = '';
        }
        stylemap = {
          x: 'left',
          y: 'top',
          bgcolor: 'background-color'
        };
        if (name in stylemap) {
          name = stylemap[name];
        }
        return this.sprite.css(name, value);
      },
      setParent: function(parent) {
        if (!(parent instanceof jQuery)) {
          parent = $(parent);
        }
        return parent.append(this.sprite);
      },
      set_id: function(id) {
        this.id = id;
        return this.sprite.attr('id', this.id);
      }
    };
    View = (function(_super) {
      __extends(View, _super);

      View.include(Sprite);

      function View(el, options) {
        if (options == null) {
          options = {};
        }
        View.__super__.constructor.call(this, options);
        if (el instanceof HTMLElement) {
          if (el.$view) {
            console.warn('already bound view', el.$view, el);
            return;
          }
        }
        this.types = {
          x: 'number',
          y: 'number',
          width: 'number',
          height: 'number'
        };
        if (el) {
          if (el instanceof View) {
            el = el.sprite;
          }
        }
        this.initSprite(el);
        this.sprite[0].$view = this;
        this.init(options);
      }

      View.prototype.setAttribute = function(name, value) {
        this.setStyle(name, value);
        return View.__super__.setAttribute.call(this, name, value);
      };

      return View;

    })(Node);
    viewFromElement = function(el, parent) {
      var child, children, i, options, tagname, view, _i, _j, _len, _len1, _ref, _results;

      tagname = el.localName;
      if (!tagname in lz) {
        console.warn('could not find element', tagname, el);
        return;
      }
      options = {};
      _ref = el.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        options[i.name] = i.value;
      }
      if (parent == null) {
        parent = el.parentNode;
      }
      options.parent = parent;
      children = (function() {
        var _j, _len1, _ref1, _results;

        _ref1 = el.childNodes;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          if (child.nodeType === 1) {
            _results.push(child);
          }
        }
        return _results;
      })();
      view = new lz[tagname](el, options);
      _results = [];
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        child = children[_j];
        if (tagname === 'class') {
          _results.push(child.$defer = true);
        } else {
          _results.push(viewFromElement(child, view));
        }
      }
      return _results;
    };
    init = function(selector) {
      var el, i, _i, _len, _results;

      if (selector == null) {
        selector = $('view');
      }
      _results = [];
      for (i = _i = 0, _len = selector.length; _i < _len; i = ++_i) {
        el = selector[i];
        if (!el.$defer) {
          _results.push(viewFromElement(el));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    Class = (function() {
      function Class(el, classoptions) {
        var body, name, options, value;

        options = {};
        for (name in classoptions) {
          value = classoptions[name];
          options[name] = value;
        }
        delete options.name;
        body = el.innerHTML;
        el.innerHTML = '';
        name = el.attributes.name.value;
        if (name in lz) {
          console.warn('class exists, overwriting', name);
        }
        lz[name] = function(instanceel, overrides) {
          var child, children, key, view, viewel, _i, _len, _ref, _results;

          for (key in overrides) {
            value = overrides[key];
            options[key] = value;
          }
          if (!overrides.name) {
            delete options.name;
          }
          view = new View(instanceel, options);
          viewel = (_ref = view.sprite) != null ? _ref[0] : void 0;
          if (!viewel) {
            return;
          }
          viewel.innerHTML = body;
          children = (function() {
            var _i, _len, _ref1, _results;

            _ref1 = viewel.childNodes;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              child = _ref1[_i];
              if (child.nodeType === 1) {
                _results.push(child);
              }
            }
            return _results;
          })();
          _results = [];
          for (_i = 0, _len = children.length; _i < _len; _i++) {
            child = children[_i];
            delete child.$defer;
            _results.push(viewFromElement(child, view));
          }
          return _results;
        };
      }

      return Class;

    })();
    return exports = {
      view: View,
      "class": Class,
      node: Node,
      init: init
    };
  })();

  $(window).on('load', function() {
    var aview, canvas;

    lz.init();
    canvas = new lz.view(null, {
      x: 100,
      y: 100,
      bgcolor: 'red',
      width: 100,
      height: 100,
      transform: 'rotate(45deg)',
      parent: $('#canvas')
    });
    return aview = new lz.view(null, {
      x: 50,
      y: 50,
      width: 20,
      height: 20,
      bgcolor: 'green',
      'border-radius': '4px',
      parent: canvas
    });
  });

}).call(this);
