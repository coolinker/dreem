// Generated by CoffeeScript 1.6.2
(function() {
  var hackstyle,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  hackstyle = (function() {
    var origstyle, stylemap, styletap;

    stylemap = {
      left: 'x',
      top: 'y',
      'background-color': 'bgcolor'
    };
    origstyle = $.style;
    styletap = function(elem, name, value) {
      var returnval, view;

      returnval = origstyle.apply(this, arguments);
      name = stylemap[name] || name;
      view = elem.$view;
      if (name in view && view[name] !== value) {
        view.gotStyle(name, value);
      }
      return returnval;
    };
    return function(active) {
      if (active) {
        return $.style = styletap;
      } else {
        return $.style = origstyle;
      }
    };
  })();

  window.lz = (function() {
    var Class, Events, Layout, Module, Mouse, Node, SimpleLayout, Sprite, View, exports, flattenattributes, htmlDecode, ignoredAttributes, init, initFromElement, moduleKeywords, mouseEvents, processSpecialTags, specialtags, typemappings;

    Events = {
      bind: function(ev, callback) {
        var calls, evs, name, _i, _len;

        evs = ev.split(' ');
        calls = this.hasOwnProperty('events') && this.events || (this.events = {});
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          calls[name] || (calls[name] = []);
          calls[name].push(callback);
        }
        return this;
      },
      one: function(ev, callback) {
        return this.bind(ev, function() {
          this.unbind(ev, arguments.callee);
          return callback.apply(this, arguments);
        });
      },
      trigger: function() {
        var args, callback, ev, list, _i, _len, _ref;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        ev = args.shift();
        list = this.hasOwnProperty('events') && ((_ref = this.events) != null ? _ref[ev] : void 0);
        if (!list) {
          return;
        }
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          callback = list[_i];
          if (callback.apply(this, args) === false) {
            break;
          }
        }
        return true;
      },
      listenTo: function(obj, ev, callback) {
        obj.bind(ev, callback);
        this.listeningTo || (this.listeningTo = []);
        this.listeningTo.push(obj);
        return this;
      },
      listenToOnce: function(obj, ev, callback) {
        var listeningToOnce;

        listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
        listeningToOnce.push(obj);
        obj.one(ev, function() {
          var idx;

          idx = listeningToOnce.indexOf(obj);
          if (idx !== -1) {
            listeningToOnce.splice(idx, 1);
          }
          return callback.apply(this, arguments);
        });
        return this;
      },
      stopListening: function(obj, ev, callback) {
        var idx, listeningTo, _i, _j, _len, _len1, _ref, _ref1, _results;

        if (obj) {
          obj.unbind(ev, callback);
          _ref = [this.listeningTo, this.listeningToOnce];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listeningTo = _ref[_i];
            if (!listeningTo) {
              continue;
            }
            idx = listeningTo.indexOf(obj);
            if (idx !== -1) {
              _results.push(listeningTo.splice(idx, 1));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _ref1 = this.listeningTo;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            obj = _ref1[_j];
            obj.unbind();
          }
          return this.listeningTo = void 0;
        }
      },
      unbind: function(ev, callback) {
        var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;

        if (!ev) {
          this.events = {};
          return this;
        }
        evs = ev.split(' ');
        for (_i = 0, _len = evs.length; _i < _len; _i++) {
          name = evs[_i];
          list = (_ref = this.events) != null ? _ref[name] : void 0;
          if (!list) {
            continue;
          }
          if (!callback) {
            delete this.events[name];
            continue;
          }
          for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
            cb = list[i];
            if (!(cb === callback)) {
              continue;
            }
            list = list.slice();
            list.splice(i, 1);
            this.events[name] = list;
            break;
          }
        }
        return this;
      }
    };
    Events.on = Events.bind;
    Events.off = Events.unbind;
    moduleKeywords = ['included', 'extended'];
    Module = (function() {
      function Module() {}

      Module.include = function(obj) {
        var key, value, _ref;

        if (!obj) {
          throw new Error('include(obj) requires obj');
        }
        for (key in obj) {
          value = obj[key];
          if (__indexOf.call(moduleKeywords, key) < 0) {
            this.prototype[key] = value;
          }
        }
        if ((_ref = obj.included) != null) {
          _ref.call(this, obj);
        }
        return this;
      };

      return Module;

    })();
    typemappings = {
      number: parseFloat
    };
    Node = (function(_super) {
      var matchConstraint, propertyBindings, scopes;

      __extends(Node, _super);

      Node.include(Events);

      function Node(el, attributes) {
        var invoke, method, methodname, methods, name, value, _ref, _ref1,
          _this = this;

        if (attributes == null) {
          attributes = {};
        }
        this.types = (_ref = attributes.types) != null ? _ref : {};
        delete attributes.types;
        methods = attributes.methods;
        for (methodname in methods) {
          method = methods[methodname];
          if (methodname in this) {
            invoke = function() {
              var meth, supr;

              supr = _this[methodname];
              meth = method;
              return _this[methodname] = function() {
                supr.apply(_this, arguments);
                return meth.apply(_this, arguments);
              };
            };
            invoke();
          } else {
            this[methodname] = method;
          }
        }
        delete attributes.methods;
        for (name in attributes) {
          value = attributes[name];
          if (name.indexOf('on') === 0) {
            name = name.substr(2);
            this.bind(name, this.eventCallback(name, value, this));
          } else {
            this.setAttribute(name, value);
          }
        }
        if (this.constraints) {
          this.bindConstraints();
        }
        if ((_ref1 = this.events) != null ? _ref1['init'] : void 0) {
          this.trigger('init', this);
        }
      }

      scopes = null;

      propertyBindings = {
        find: function(expression) {
          var ast;

          ast = acorn.parse(expression);
          scopes = [];
          acorn.walkDown(ast, this);
          return scopes;
        },
        MemberExpression: function(n) {
          var name;

          name = n.property.name;
          n = n.object;
          scopes.push({
            binding: acorn.stringify(n),
            property: name
          });
          return true;
        }
      };

      matchConstraint = /\${(.+)}/;

      Node.prototype.applyConstraint = function(name, expression) {
        var bindexpression, bindings, constraintBinding, scope, _i, _len, _ref, _ref1, _results;

        if ((_ref = this.constraints) == null) {
          this.constraints = {};
        }
        this.constraints[name] = (new Function([], 'return ' + expression)).bind(this);
        scopes = propertyBindings.find(expression);
        constraintBinding = this.constraints[name];
        bindings = (_ref1 = constraintBinding.bindings) != null ? _ref1 : constraintBinding.bindings = {};
        _results = [];
        for (_i = 0, _len = scopes.length; _i < _len; _i++) {
          scope = scopes[_i];
          bindexpression = scope.binding;
          scope.compiled = (new Function([], 'return ' + bindexpression)).bind(this);
          _results.push(bindings[bindexpression] = scope);
        }
        return _results;
      };

      Node.prototype.setAttribute = function(name, value) {
        var constraint, setter, type, _ref;

        if (this[name] !== value) {
          constraint = typeof value.match === "function" ? value.match(matchConstraint) : void 0;
          if (constraint) {
            this.applyConstraint(name, constraint[1]);
            return;
          }
          if (name in this.types) {
            type = this.types[name];
            if (type in typemappings) {
              value = typemappings[type](value);
            }
          }
          setter = 'set_' + name;
          if (setter in this) {
            this[setter](value);
          } else {
            this[name] = value;
          }
        }
        if ((_ref = this.events) != null ? _ref[name] : void 0) {
          this.trigger(name, value, this, name);
        }
        return this;
      };

      Node.prototype.eventCallback = function(name, js, scope) {
        return function() {
          var args;

          if (name in scope) {
            args = [scope[name]];
          } else {
            args = _.flatten(arguments);
          }
          return (new Function(['value'], js)).apply(scope, args);
        };
      };

      Node.prototype.bindConstraints = function() {
        var bindexpression, binding, boundref, name, property, value, _ref, _results;

        _ref = this.constraints;
        _results = [];
        for (name in _ref) {
          value = _ref[name];
          this.setAttribute(name, value());
          _results.push((function() {
            var _ref1, _results1;

            _ref1 = this.constraints[name].bindings;
            _results1 = [];
            for (bindexpression in _ref1) {
              binding = _ref1[bindexpression];
              property = binding.property;
              boundref = binding.compiled();
              if (boundref == null) {
                boundref = boundref.$view;
              }
              _results1.push(boundref.bind(property, this.constraintCallback(name, value)));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Node.prototype.constraintCallback = function(name, value) {
        var _this = this;

        return function() {
          return _this.setAttribute(name, value());
        };
      };

      Node.prototype.set_parent = function(parent) {
        var _ref, _ref1;

        if (parent instanceof Node) {
          this.parent = parent;
          if (this.name != null) {
            parent[this.name] = this;
          }
          if ((_ref = parent.subnodes) == null) {
            parent.subnodes = [];
          }
          parent.subnodes.push(this);
          if ((_ref1 = parent.events) != null ? _ref1['subnodes'] : void 0) {
            return parent.trigger('subnodes', this);
          }
        }
      };

      Node.prototype.set_name = function(name) {
        var _ref;

        this.name = name;
        return (_ref = this.parent) != null ? _ref[name] = this : void 0;
      };

      return Node;

    })(Module);
    Sprite = (function() {
      var stylemap;

      stylemap = {
        x: 'left',
        y: 'top',
        bgcolor: 'background-color'
      };

      function Sprite(jqel, view) {
        this.jqel = jqel != null ? jqel : $('<div/>');
        this.animate = __bind(this.animate, this);
        if (!(this.jqel instanceof jQuery)) {
          this.jqel = $(this.jqel);
        }
        this.jqel[0].$view = view;
        this.jqel.addClass('sprite');
      }

      Sprite.prototype.setStyle = function(name, value) {
        if (value == null) {
          value = '';
        }
        if (name in stylemap) {
          name = stylemap[name];
        }
        return this.jqel.css(name, value);
      };

      Sprite.prototype.set_parent = function(parent) {
        if (parent instanceof Sprite) {
          parent = parent.jqel;
        }
        if (!(parent instanceof jQuery)) {
          parent = $(parent);
        }
        return parent.append(this.jqel);
      };

      Sprite.prototype.set_id = function(id) {
        this.id = id;
        return this.jqel.attr('id', this.id);
      };

      Sprite.prototype.animate = function() {
        return this.jqel.animate.apply(this.jqel, arguments);
      };

      return Sprite;

    })();
    ignoredAttributes = {
      parent: true,
      id: true,
      name: true,
      "extends": true
    };
    View = (function(_super) {
      __extends(View, _super);

      function View(el, attributes) {
        if (attributes == null) {
          attributes = {};
        }
        attributes.types = {
          x: 'number',
          y: 'number',
          width: 'number',
          height: 'number'
        };
        if (el instanceof HTMLElement && el.$view) {
          console.warn('already bound view', el.$view, el);
          return;
        }
        if (el && el instanceof View) {
          el = el.sprite;
        }
        this.sprite = new Sprite(el, this);
        View.__super__.constructor.call(this, el, attributes);
      }

      View.prototype.gotStyle = function(name, value) {
        if (!ignoredAttributes[name]) {
          return _super.prototype.setAttribute.apply(this, arguments);
        }
      };

      View.prototype.setAttribute = function(name, value) {
        if (!(ignoredAttributes[name] || this[name] === value)) {
          this.sprite.setStyle(name, value);
        }
        return View.__super__.setAttribute.call(this, name, value);
      };

      View.prototype.set_parent = function(parent) {
        var _ref, _ref1;

        View.__super__.set_parent.call(this, parent);
        if (parent instanceof View) {
          if ((_ref = parent.subviews) == null) {
            parent.subviews = [];
          }
          parent.subviews.push(this);
          if ((_ref1 = parent.events) != null ? _ref1['subviews'] : void 0) {
            parent.trigger('subviews', this);
          }
          parent = parent.sprite;
        }
        return this.sprite.set_parent(parent);
      };

      View.prototype.set_id = function(id) {
        this.id = id;
        return this.sprite.set_id(id);
      };

      View.prototype.animate = function() {
        return this.sprite.animate.apply(this, arguments);
      };

      return View;

    })(Node);
    flattenattributes = function(namednodemap) {
      var attributes, i, _i, _len;

      attributes = {};
      for (_i = 0, _len = namednodemap.length; _i < _len; _i++) {
        i = namednodemap[_i];
        attributes[i.name] = i.value;
      }
      return attributes;
    };
    specialtags = ['handler', 'method', 'attribute', 'setter'];
    initFromElement = function(el, parent) {
      var attributes, child, children, event, tagname, _i, _j, _k, _len, _len1, _len2, _ref, _results;

      tagname = el.localName;
      if (!(tagname in lz)) {
        console.warn('could not find class for tag', tagname, el);
        return;
      }
      attributes = flattenattributes(el.attributes);
      for (_i = 0, _len = mouseEvents.length; _i < _len; _i++) {
        event = mouseEvents[_i];
        el.removeAttribute('on' + event);
      }
      if (parent == null) {
        parent = el.parentNode;
      }
      if (parent != null) {
        attributes.parent = parent;
      }
      children = (function() {
        var _j, _len1, _ref, _results;

        _ref = el.childNodes;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          child = _ref[_j];
          if (child.nodeType === 1) {
            _results.push(child);
          }
        }
        return _results;
      })();
      if (tagname === 'class') {
        for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
          child = children[_j];
          child.$defer = true;
        }
      }
      processSpecialTags(el, attributes);
      parent = new lz[tagname](el, attributes);
      if (tagname !== 'class') {
        _results = [];
        for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
          child = children[_k];
          if (_ref = child.localName, __indexOf.call(specialtags, _ref) < 0) {
            _results.push(initFromElement(child, parent));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    init = function(selector) {
      var el, i, style, _i, _len;

      if (selector == null) {
        selector = $('view');
      }
      style = document.createElement('style');
      style.type = 'text/css';
      style.innerHTML = '.sprite{position:absolute;} .hidden{display:none;}';
      document.getElementsByTagName('head')[0].appendChild(style);
      for (i = _i = 0, _len = selector.length; _i < _len; i = ++_i) {
        el = selector[i];
        if (!(el.$defer || el.$view)) {
          initFromElement(el);
        }
      }
      return hackstyle(true);
    };
    htmlDecode = function(input) {
      var e;

      if (!input) {
        return;
      }
      e = document.createElement('div');
      e.innerHTML = input;
      return e.childNodes[0].nodeValue;
    };
    processSpecialTags = function(el, classattributes) {
      var args, attributes, child, childname, children, js, type, value, _i, _len, _ref, _ref1, _ref2, _ref3, _results;

      if ((_ref = classattributes.types) == null) {
        classattributes.types = {};
      }
      if ((_ref1 = classattributes.methods) == null) {
        classattributes.methods = {};
      }
      children = _.filter(el.childNodes, function(child) {
        var _ref2;

        return child.nodeType === 1 && (_ref2 = child.localName, __indexOf.call(specialtags, _ref2) >= 0);
      });
      _results = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        attributes = flattenattributes(child.attributes);
        child.setAttribute('class', 'hidden');
        js = htmlDecode(child.innerHTML);
        childname = child.localName;
        if (childname === 'handler') {
          _results.push(classattributes[attributes.name] = js);
        } else if (childname === 'method') {
          args = ((_ref2 = attributes.args) != null ? _ref2 : '').split();
          _results.push(classattributes.methods[attributes.name] = new Function(args, js));
        } else if (childname === 'setter') {
          args = ((_ref3 = attributes.args) != null ? _ref3 : '').split();
          _results.push(classattributes.methods['set_' + attributes.name] = new Function(args, js));
        } else if (childname === 'attribute') {
          type = attributes.type;
          value = attributes.value;
          if (type in typemappings) {
            value = typeof typemappings[type] === "function" ? typemappings[type](value) : void 0;
          }
          classattributes[attributes.name] = attributes.value;
          _results.push(classattributes.types[attributes.name] = attributes.type);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    Class = (function() {
      function Class(el, classattributes) {
        var body, ext, ignored, name, _ref;

        if (classattributes == null) {
          classattributes = {};
        }
        name = classattributes.name;
        ext = (_ref = classattributes["extends"]) != null ? _ref : classattributes["extends"] = 'view';
        for (ignored in ignoredAttributes) {
          delete classattributes[ignored];
        }
        processSpecialTags(el, classattributes);
        body = el.innerHTML;
        if (name in lz) {
          console.warn('class exists, overwriting', name);
        }
        lz[name] = function(instanceel, instanceattributes) {
          var attributes, child, children, key, parent, propname, val, value, viewel, _i, _len, _ref1, _results;

          attributes = _.clone(classattributes);
          for (key in instanceattributes) {
            value = instanceattributes[key];
            if ((key === 'methods' || key === 'types') && key in attributes) {
              attributes[key] = _.clone(attributes[key]);
              for (propname in value) {
                val = value[propname];
                attributes[key][propname] = val;
              }
            } else {
              attributes[key] = value;
            }
          }
          parent = new lz[ext](instanceel, attributes);
          if (!(viewel = (_ref1 = parent.sprite) != null ? _ref1.jqel[0] : void 0)) {
            return;
          }
          viewel.innerHTML = body;
          children = (function() {
            var _i, _len, _ref2, _results;

            _ref2 = viewel.childNodes;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              child = _ref2[_i];
              if (child.nodeType === 1) {
                _results.push(child);
              }
            }
            return _results;
          })();
          _results = [];
          for (_i = 0, _len = children.length; _i < _len; _i++) {
            child = children[_i];
            child.$defer = null;
            _results.push(initFromElement(child, parent));
          }
          return _results;
        };
      }

      return Class;

    })();
    Layout = (function(_super) {
      var locked;

      __extends(Layout, _super);

      locked = true;

      function Layout(el, attributes) {
        var subview, subviews, _base, _i, _len, _ref;

        if (attributes == null) {
          attributes = {};
        }
        this.skip = __bind(this.skip, this);
        this.update = __bind(this.update, this);
        this.added = __bind(this.added, this);
        Layout.__super__.constructor.call(this, el, attributes);
        this.parent.bind('subviews', this.added);
        if ((_ref = (_base = this.parent).layouts) == null) {
          _base.layouts = [];
        }
        this.parent.layouts.push(this);
        subviews = this.parent.subviews;
        if (subviews) {
          for (_i = 0, _len = subviews.length; _i < _len; _i++) {
            subview = subviews[_i];
            this.added(subview);
          }
        }
        locked = false;
        this.update();
      }

      Layout.prototype.added = function(child) {
        var _ref;

        if ((_ref = this.events) != null ? _ref['subview'] : void 0) {
          this.trigger('subview', child);
        }
        return this.update(null, child);
      };

      Layout.prototype.update = function(ignore, sender) {
        if (this.skip) {

        }
      };

      Layout.prototype.skip = function() {
        var _ref;

        if (locked || (!((_ref = this.parent) != null ? _ref.subviews : void 0))) {
          return true;
        }
      };

      return Layout;

    })(Node);
    SimpleLayout = (function(_super) {
      __extends(SimpleLayout, _super);

      SimpleLayout.attribute = 'x';

      SimpleLayout.axis = 'width';

      SimpleLayout.spacing = 10;

      SimpleLayout.inset = 10;

      function SimpleLayout(el, attributes) {
        var _ref;

        if (attributes == null) {
          attributes = {};
        }
        this.update = __bind(this.update, this);
        if ((_ref = attributes.types) == null) {
          attributes.types = {};
        }
        attributes.types.spacing = 'number';
        attributes.types.inset = 'number';
        SimpleLayout.__super__.constructor.call(this, el, attributes);
      }

      SimpleLayout.prototype.set_attribute = function(attr) {
        var newaxis, subview, _i, _len, _ref;

        newaxis = (function() {
          switch (attr) {
            case 'x':
              return 'width';
            case 'y':
              return 'height';
          }
        })();
        if (newaxis !== axis) {
          _ref = this.parent.subviews;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            subview = _ref[_i];
            subview.unbind(this.axis, this.update).bind(newaxis, this.update);
          }
        }
        this.attribute = attr;
        return this.update();
      };

      SimpleLayout.prototype.set_spacing = function(space) {
        this.spacing = space;
        return this.update();
      };

      SimpleLayout.prototype.set_inset = function(i) {
        this.inset = i;
        return this.update();
      };

      SimpleLayout.prototype.added = function(child) {
        child.bind(this.axis, this.update);
        return SimpleLayout.__super__.added.call(this, child);
      };

      SimpleLayout.prototype.update = function(value, sender) {
        var pos, skip, subview, _i, _len, _ref;

        if (this.skip()) {
          return;
        }
        pos = this.inset;
        if (sender) {
          skip = true;
        }
        _ref = this.parent.subviews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subview = _ref[_i];
          if (skip && subview !== sender) {

          } else {
            if (subview[this.attribute] !== pos) {
              subview.setAttribute(this.attribute, pos);
            }
            skip = false;
          }
          pos += this.spacing + subview[this.axis];
        }
        return pos;
      };

      return SimpleLayout;

    })(Layout);
    mouseEvents = ['click', 'mouseover', 'mouseout', 'mousedown', 'mouseup'];
    Mouse = (function(_super) {
      var mouse;

      __extends(Mouse, _super);

      function Mouse() {
        var event, _i, _len;

        this.docSelector = $(document);
        for (_i = 0, _len = mouseEvents.length; _i < _len; _i++) {
          event = mouseEvents[_i];
          this.docSelector.on(event, this.handler);
        }
      }

      Mouse.prototype.sender = function() {
        return trigger("mousemove", left, top);
      };

      Mouse.prototype.handler = function(event) {
        var type, view, _ref;

        view = event.target.$view;
        type = event.type;
        if (view != null ? (_ref = view.events) != null ? _ref[type] : void 0 : void 0) {
          view.trigger(event.type, view);
        }
        if (this.started) {
          requestTick(0, sender);
          this.left = event.pageX;
          return this.top = event.pageY;
        }
      };

      Mouse.prototype.start = function() {
        if (this.started) {
          return;
        }
        this.started = true;
        return this.docSelector.on("mousemove", this.handler).one("mouseout", this.stop);
      };

      Mouse.prototype.stop = function() {
        if (!this.started) {
          return;
        }
        this.started = false;
        return this.docSelector.off("mousemove", this.handler).one("mouseover", this.start);
      };

      mouse = new Mouse();

      return Mouse;

    })(Module);
    return exports = {
      view: View,
      "class": Class,
      node: Node,
      layout: Layout,
      simplelayout: SimpleLayout,
      initViews: init
    };
  })();

  $(window).on('load', function() {
    var aview, canvas;

    lz.initViews();
    canvas = new lz.view(null, {
      x: 100,
      y: 100,
      bgcolor: 'red',
      width: 100,
      height: 100,
      transform: 'rotate(45deg)',
      parent: $('#canvas')
    });
    return aview = new lz.view(null, {
      x: 50,
      y: 50,
      width: 20,
      height: 20,
      bgcolor: 'green',
      'border-radius': '4px',
      parent: canvas
    });
  });

}).call(this);

/*
//@ sourceMappingURL=layout.map
*/
